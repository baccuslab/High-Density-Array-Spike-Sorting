OPTICAL_BENCH Version 1.0 20020501

0 Quick-start:
--------------
Unpack it wherever you want it: unzip optical_bench.zip
Add the directory to your matlab-path
Run opt_exempel.
Look at that file and at opt.exmpl and lens.exmlp


1 Outline:
----------
This is an optical raytracer. Currently it has support for the
following optical elements: apertures, grids, lenses, wedge prisms,
screens and slits. Refraction at boundaries are calculated with Snell's
law and refractive index of a fairly large number of optical glasses
are used at the wavelength of the rays. Absorption through glass
surfaces are calculated for the following glasses: BK7, B270, Fused
Silica and Pyrex. Further losses due to refraction/reflection is taken
into account. 
Trace rays through optical systems built by apertures, grids, lenses,
prisms slits, screens and surfaces of arbitrary shape.

2 Installation:
--------------
1. Put the file where you want the directory.
2. Unpack it wherever you want it: unzip optical_bench.zip
3. Add the directory to your matlab-path


3 Internals:
------------
The two structures used in this program are: RAYS and `OPT_ELEM',
see opt_ray.m and opt_elem.m. The RAY structure holds the information
of the rays of light. It has the following fields:
ray.
          r: [-3 0 0]  Starting point and points of intersection with
		       optical elements 
          e: [1 0 0]   Unit vector along k
          n: 1         current refractive index, changes along the trace 
          I: 1         intensity (or amplitude if phase is include
 wavelength: 5.577e-07 Wavelength of the light.
      color: [0 1 0]   Color for plotting the individual ray
 absorption: 0         Absorbtivity in the current media.
       [phase]:        Used for interference (untested)

The OPT_ELEM structure holds information on an optical element or for
lenses and prisms one surface. The individual element use different
fields depending on type, they will all have all fields:
opt_elem.
 type       Type name: aperture, grid, lens, prism, screen, slit, or function name
 r          [x y z] - position of element.
 n	    normal of element
 dxdydz	    rectangular size of screen, slit, grid and prism
 diameter   of Lenses and apertures
 glass	    type of glass
 arc	    Anti Reflection Coating
 imgres	    Images size [sx sy], only used for `screen'
 img	    Image, only used for `screen'
 r_o_curv   Radie of curvature, only used for lenses,
 lpmm	    Lines per millimeter, only used for grids
 e_slits    unit vector along the slits, used for grid and slit
 absorption 
 fcn1	    aotu-generated function handle to function for surface
 fcn2	    aotu-generated function handle to function for surface normal
 arglist    struct holding the optional arguments to fcn1 & fcn2

How to create an optical_element?
There are one function for each type, try for example help
opt_lens. The functions take one string argument which should be the
same as the type, and a second string-matrix where the first 12 chars
should be used for describing the field, the rest should hold the
value of the field. The functions should hopefully error-out on
insufficient arguments.

How to build a complex lens system?
If poor in all other aspects this should be the strength. The
functions run in matlab so any clever way you might come up with to
generate optimal/good/usefull/interestin set of parameters should work
as long as the necessary number of parameters are set. OPT_BUILD reads
files such as OPT.EXMPL and LENS.EXMPL. Each optical element are
initiated by the line:
#type    current_type
and continues until the next line starting with #type.
The lines in between should begin with field name followed by value(s).
If the #type is file the next line should look like:
name     file.name
This should make it possible to have a structured organisation with
smaller files describing often used compound elements. All files should
end with
#type      end

Surfaces specified with functions.
----------------------------------
It is possible to have lenses/optical surfaces with arbitrary
shape. In order to do this there is an opt_elem type fcn. An example
is given in files optf_coshyp.m and coshlens.exmpl. This example
specifies a lens where the shape of the surfaces are cosh-rotational
cones. 

The general function FCN should, called with FCN(R,'s',arglist) return
0 (zero) when R is on the lens surface and monotonically growing
scalars when R deviates. When R is outside the lens area but on the
analytical extension of the lens surface the function should return a
scalar smaller than -2eps or larger than 2eps. Called with
FCN(R,'n',arglist) the functnion should return the normal
of the lens surface. If you want the surface to appear in a plot of
the optics the function should respond with a proper surface plot when
called with FCN(R,'p',arglist) ARGLIST will be a struct as produced by
OPT_FCN. The argument R is a 1x3 vector [x y z].

Shortcomings and limitations:
------------------------------
The ray tracer does a diffraction-free tracing, and the transmission
grid is modeled as an element that splits the beam equally strong into
the main maxima. However, there is untested support for interference -
for this set the PHASE field of the initial rays. 

There is likely not possible to use beam splitters to make constructs
such as Michelson interferometers. 

There is no explicit support for polarisation, all reflections are
calculated as if the incident light was unpolarised. Thus, it is
impossible to model plane, elliptical and circular polarised light.

Copyright:
----------
Distributed under the  - see COPYRIGHT.

Comments and bug reports:
bjorn@irf.se
